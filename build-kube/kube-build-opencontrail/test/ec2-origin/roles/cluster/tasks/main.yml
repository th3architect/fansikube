---
- name: Locate the VPC
  ec2_vpc_facts:
    region: "{{ aws_region }}"
    resource_tags:
      "Name": opencontrail-ci-vpc

- set_fact:
   ec2_public_subnet: "{{ ec2_vpc.subnets | selectattr('tags', 'equalto', dict(Name='opencontrail-ci-public')) | first}}"
   ec2_private_subnet: "{{ ec2_vpc.subnets | selectattr('tags', 'equalto', dict(Name='opencontrail-ci-private')) | first}}"

- name: IP addressing
  set_fact:
    cluster_public_subnet: "{% if job_id is defined %}172.20.{{ 8 * (job_id|int % 32) }}.0/24{% else %}172.18.64.0/20{% endif %}"
    cluster_service_addresses: "{% if job_id is defined %}10.{{ 160 + (job_id|int % 32) }}.0.0/16{% else %}10.65.0.0/16{% endif %}"

- name: Deployer security-group
  ec2_group:
    name: origin-deployer-group
    description: "origin deployer security-group"
    region: "{{ aws_region }}"
    vpc_id: "{{ ec2_vpc.id }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: udp
        from_port: 53
        to_port: 53
        cidr_ip: 10.0.0.0/8
      - proto: tcp
        from_port: 53
        to_port: 53
        cidr_ip: 10.0.0.0/8
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: sg_deployer

- name: Cluster security-group
  ec2_group:
    name: origin-cluster-group
    description: "k8s cluster security-group"
    vpc_id: "{{ ec2_vpc.id }}"
    region: "{{ aws_region }}"
    rules:
      - proto: all
        group_name: origin-cluster-group
      - proto: all
        group_id: "{{ sg_deployer.group_id }}"
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: sg_cluster

- name: Deployer
  ec2:
    image: "{{ ec2_image }}"
    key_name: k8s
    instance_tags:
      Name: "origin-deployer-{{ job_id | default('00') }}"
      Cluster: "origin-ansible-{{ job_id | default('00') }}"
    instance_type: t2.micro
    region: "{{ aws_region }}"
    vpc_subnet_id: "{{ ec2_public_subnet.id }}"
    group_id: "{{ sg_deployer.group_id }}"
    assign_public_ip: yes
    count_tag:
      Name: "origin-deployer-{{ job_id | default('00') }}"
    exact_count: 1
    wait: true
  register: origin_deployer

- name: Add deployer to inventory
  add_host: name='{{ origin_deployer.tagged_instances[0].public_dns_name }}' groups=deployer ansible_ssh_user="{{ ssh_user }}"

- name: Create gateway instance
  ec2:
    image: "{{ ec2_image }}"
    key_name: k8s
    instance_tags:
      Name: "origin-gateway-{{ job_id | default('00') }}"
      Cluster: "origin-ansible-{{ job_id | default('00') }}"
    instance_type: m3.medium
    region: "{{ aws_region }}"
    vpc_subnet_id: "{{ ec2_public_subnet.id }}"
    group_id: "{{ sg_cluster.group_id }}"
    assign_public_ip: yes
    source_dest_check: no
    wait: yes
    count_tag:
      Name: "origin-gateway-{{ job_id | default('00') }}"
    exact_count: 1
    volumes:
      - device_name: /dev/xvdf
        delete_on_termination: true
        volume_type: generic
        volume_size: 40
  register: origin_gateway

- name: Create master instance
  ec2:
    image: "{{ ec2_image }}"
    key_name: k8s
    instance_tags:
      Name: "origin-master-{{ job_id | default('00') }}"
      Cluster: "origin-ansible-{{ job_id | default('00') }}"
    instance_type: m3.large
    region: "{{ aws_region }}"
    vpc_subnet_id: "{{ ec2_private_subnet.id }}"
    group_id: "{{ sg_cluster.group_id }}"
    count_tag:
      Name: "origin-master-{{ job_id | default('00') }}"
    exact_count: 1
    volumes:
      - device_name: /dev/xvdf
        delete_on_termination: true
        volume_type: generic
        volume_size: 80
  register: origin_master

- name: Add instance to masters group
  add_host: name=origin-master-1 groups=masters instance_ip="{{ origin_master.tagged_instances[0].private_ip }}"

- name: Create nodes
  ec2:
    image: "{{ ec2_image }}"
    key_name: k8s
    instance_tags:
      Name: "origin-node-{{ job_id | default('00') }}"
      Cluster: "origin-ansible-{{ job_id | default('00') }}"
    instance_type: m3.medium
    region: "{{ aws_region }}"
    vpc_subnet_id: "{{ ec2_private_subnet.id }}"
    group_id: "{{ sg_cluster.group_id }}"
    count_tag:
      Name: "origin-node-{{ job_id | default('00') }}"
    exact_count: 2
    volumes:
      - device_name: /dev/xvdf
        delete_on_termination: true
        volume_type: generic
        volume_size: 80
  register: origin_nodes

- name: Update the vpc routing table (private subnet)
  ec2_vpc_rtb_update:
    region: "{{ aws_region }}"
    vpc_id: "{{ ec2_vpc.id }}"
    subnets:
      - "{{ ec2_private_subnet.id }}"
    routes:
      - dest: "{{ cluster_service_addresses }}"
        gw: "{{ origin_gateway.tagged_instances[0].id }}"

- name: Store the status of the cluster
  template: src=status.j2 dest="{{ inventory_dir }}/cluster.status"

- name: Create inventory file
  template: src=inventory.j2 dest="{{ inventory_dir }}/inventory.cluster"

- name: Determine jenkins-master information
  ec2_remote_facts:
    region: "{{ aws_region }}"
    filters:
      instance-state-name: running
      "tag:Name": jenkins-master
  register: jenkins_instance

- name: Add jenkins-instance
  add_host: name="{{ jenkins_instance.instances[0].public_dns_name }}" groups=jenkins-master ansible_ssh_user=ubuntu

- wait_for: host="{{ origin_deployer.tagged_instances[0].public_dns_name }}" port=22
